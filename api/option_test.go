// Code generated by go2go; DO NOT EDIT.


//line option_test.go2:1
package api

//line option_test.go2:1
import (
//line option_test.go2:1
 "errors"
//line option_test.go2:1
 "testing"
//line option_test.go2:1
)

//line option_test.go2:8
var (
	_    instantiate୦୦Option୦int = instantiate୦୦None୦int{}
	_    instantiate୦୦Option୦int = instantiate୦୦Some୦int{value: 10}
	_    instantiate୦୦Option୦int = instantiate୦୦Of୦int(10)
	_    instantiate୦୦Option୦int = instantiate୦୦Empty୦int()
	some instantiate୦୦Option୦int = instantiate୦୦Of୦int(10)
	none instantiate୦୦Option୦int = instantiate୦୦Empty୦int()
)

func TestIsPresent(t *testing.T) {
	if some.IsEmpty() {
		t.Errorf("A value should be present!")
	}

	if !none.IsEmpty() {
		t.Errorf("No value should be present!")
	}
}

func TestGetOrElse(t *testing.T) {
	if some.OrElse(20) != 10 {
		t.Errorf("Value should be 10 not 20")
	}

	if none.OrElse(20) != 20 {
		t.Errorf("Value should be 20!")
	}
}

func TestGetOrError(t *testing.T) {
	if _, err := some.OrElseError(errors.New("should not be thrown")); err != nil {
		t.Error(err)
	}

	if _, err := none.OrElseError(errors.New("should return an error")); err == nil {
		t.Error(err)
	}
}

func TestFilter(t *testing.T) {
	var evenPredicate = func(value int) bool {
		return value%2 == 0
	}
	if some.Filter(evenPredicate).IsEmpty() {
		t.Error("result of filtering should not be empty")
	}

	if !none.Filter(evenPredicate).IsEmpty() {
		t.Error("result of filtering should be empty")
	}
}

//line option_test.go2:58
type instantiate୦୦Option୦int interface {
//line option.go2:4
 IsEmpty() bool
			OrElse(

//line option_test.go2:9
  int) int
//line option.go2:6
 OrElseError(err error) (

//line option_test.go2:9
  int, error)
//line option.go2:7
      Filter(func(

//line option_test.go2:9
  int) bool) instantiate୦୦Option୦int
//line option.go2:8
}
//line option.go2:8
type instantiate୦୦None୦int struct{}

//line option.go2:20
func (n instantiate୦୦None୦int,) IsEmpty() bool {
	return true
}

func (n instantiate୦୦None୦int,) OrElse(value int,

//line option.go2:24
) int {
	return value
}

func (n instantiate୦୦None୦int,) OrElseError(err error) (int,

//line option.go2:28
 error) {
	return *new(int,
//line option.go2:29
 ), err
}

func (n instantiate୦୦None୦int,) Filter(predictate func(int,

//line option.go2:32
) bool) instantiate୦୦Option୦int {
	return instantiate୦୦Empty୦int()
}

//line option.go2:34
type instantiate୦୦Some୦int struct {
//line option.go2:37
 value int
}

func (s instantiate୦୦Some୦int,) IsEmpty() bool {
	return false
}

func (s instantiate୦୦Some୦int,) OrElse(value int,

//line option.go2:44
) int {
	return s.value
}

func (s instantiate୦୦Some୦int,) OrElseError(err error) (int,

//line option.go2:48
 error) {
	return s.value, nil
}

func (s instantiate୦୦Some୦int,) Filter(predicate func(int,

//line option.go2:52
) bool) instantiate୦୦Option୦int {
	if predicate(s.value) {
		return s
	}
	return instantiate୦୦Empty୦int()
}
//line option.go2:14
func instantiate୦୦Of୦int(value int,

//line option.go2:14
) instantiate୦୦Option୦int {
	return instantiate୦୦Some୦int{value}
}
//line option.go2:10
func instantiate୦୦Empty୦int() instantiate୦୦Option୦int {
	return instantiate୦୦None୦int{}
}

//line option.go2:12
var _ = errors.As
//line option.go2:12
var _ = testing.AllocsPerRun
